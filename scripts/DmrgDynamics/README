
- DYNAMICS with Lanczos++ and DMRG++

- Preparation

Software LICENSE and DISCLAIMER is in the root directory
of each repository.

One needs to obtain the software with

cd someDirectory/
git clone https://github.com/g1257/PsimagLite
git clone https://github.com/g1257/dmrgpp

For testing purposes one might want also:

git clone https://github.com/g1257/LanczosPlusPlus

For code integrity, it's a good idea to verify hashes at

https://g1257.github.com/hashes.html
It's better to compile all codes at this point

cd PsimagLite/drivers
perl make.pl continuedFractionCollection
perl make.pl  combineContinuedFraction

cd ../../lanczos/src
make lanczos

cd ../../dmrgpp/src
perl configure.pl
make

- Density of States with Lanczos

We'll compute the density of states at site 4
TSPSites 1 4
for a Hubbard chain with U=8, V=-4, with Lanczos.
The input file inputHubbardChain.inp is included in the repository.

cd LanczosPlusPlus/src
./lanczos -f inputHubbardChain.inp -g c > out44.comb
../../PsimagLite/drivers/continuedFractionCollection -f out44.comb -b -10 -e 10 -s 0.01 -d 0.1 > out44.cf
here we begin at freq. omega -10 and end at freq. omega 10 in steps of 0.01 with
a width for the deltas of 0.1.

- Density of States with DMRG

First one must create a ``dollarized'' input file, name it
 inputTemplate.inp, and copy it to 
cd  dmrgpp/scripts/DmrgDynamics
cp  /path/to/inputTemplate.inp .
An example is already included.

Note that in addition to the dollar signs, inputTemplate.inp
also contains
##U=8
##V=-4

Now copy the executable
cp ../../src/dmrg .
Next create the observable c.txt, an example is already included. 

To do a quick test we can do:

perl manyOmegas.pl -10 2 0.1 c nobatch

and when that finishes do

perl procOmegas.pl -10 2 0.1 space 4

which will write to out.txt
omega real imag
where real and imag are the real and imaginary part of the
density of states for site 4.

Now that we checked that everthing went well we can run
with more values of omega, let's say 10
perl manyOmegas.pl -10 10 0.1 c nobatch
and when that finishes one obtains them with
rm out.txt
perl procOmegas.pl -10 10 0.1 space 4

Running in parallel is also possible.
For that create a file batchTemplate.pbs which contains 
#PBS -N runNumber$$ind
and something like
./dmrg -f $$input -o ':$$observable.txt' &> out$$ind.txt
Now one can run in parallel with
perl manyOmegas.pl -10 100 0.1 c test
first and check the batch files produced.
Then to submit them all
perl manyOmegas.pl -10 100 0.1 c submit

When finished, results can be obtained again with
perl procOmegas.pl -10 100 0.1 space 4

